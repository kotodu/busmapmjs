<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta charset="UTF-8" />
		<style>body {font-family: IPAmjMincho;}</style>
		<title>タイトル</title>
	</head>
	<body>
		<h1>タイトル</h1>
		<div id="div1"></div>
		<div id="div2"></div>
		<script type="module">
		//<![CDATA[
import {f_sort_nodes} from "./mjs/f_sort_nodes.mjs";

//グラフの元になる歩道達
const c_walk_array/*: {
	"node_array": string[]; //節点idの列
}[]*/ = [
	{"node_array": ["A", "B", "C", "D", "E", "F", "G"]},
	{"node_array": ["G", "F", "E", "D", "C", "B", "A"]},
	{"node_array": ["A", "B", "C", "D", "E", "H", "I", "J", "K"]},
	{"node_array": ["J", "I", "H", "E", "D", "C", "B", "A"]},
	{"node_array": ["G", "F", "E", "H", "I", "J", "K"]},
	{"node_array": ["J", "I", "H", "E", "F", "G"]}
]; //サンプルデータ


const c_stop_array = f_sort_nodes(c_walk_array);

const c_stop_array_index/*: {
	[key: string]: number; //節点idとそれが何番目か
}*/ = {};
for (let i1 = 0; i1 < c_stop_array.length; i1++) {
	c_stop_array_index[c_stop_array[i1]] = i1;
}


const c_stop_patterns/*: number[][]*/ = [];
for (let i1 = 0; i1 < c_walk_array.length; i1++) {
	c_stop_patterns.push([]);
	for (let i2 = 0; i2 < c_stop_array.length; i2++) {
		c_stop_patterns[i1].push(""); //初期化
	}
	
	const c_number_array/*: number*/ = []; //何番目の停留所か
	for (let i2 = 0; i2 < c_walk_array[i1]["node_array"].length; i2++) {
		c_number_array.push(c_stop_array_index[c_walk_array[i1]["node_array"][i2]]);
	}
	
	let l_count = 0; //左側の余白数
	for (let i2 = 0; i2 < c_number_array.length; i2++) {
		for (let i3 = 0; i3 < l_count; i3++) {
			c_stop_patterns[i1][c_number_array[i2]] += "　";
		}
		let l_direction/*: string*/ = ""; //向きの記号
		
		if (i2 === 0) {
			if (c_number_array[i2] < c_number_array[i2 + 1]) {
				c_stop_patterns[i1][c_number_array[i2]] += "▼";
			} else {
				c_stop_patterns[i1][c_number_array[i2]] += "▲";
			}
		} else if (i2 === c_number_array.length - 1) {
			if (c_number_array[i2 - 1] < c_number_array[i2]) {
				c_stop_patterns[i1][c_number_array[i2]] += "▼";
			} else {
				c_stop_patterns[i1][c_number_array[i2]] += "▲";
			}
		} else {
			if (c_number_array[i2 - 1] < c_number_array[i2] && c_number_array[i2] < c_number_array[i2 + 1]) {
				c_stop_patterns[i1][c_number_array[i2]] += "▼";
			} else if (c_number_array[i2 - 1] > c_number_array[i2] && c_number_array[i2] > c_number_array[i2 + 1]) {
				c_stop_patterns[i1][c_number_array[i2]] += "▲";
			} else if (c_number_array[i2 - 1] < c_number_array[i2] && c_number_array[i2] > c_number_array[i2 + 1]) {
				c_stop_patterns[i1][c_number_array[i2]] += "▼▲";
				l_count += 1;
			} else if (c_number_array[i2 - 1] > c_number_array[i2] && c_number_array[i2] < c_number_array[i2 + 1]) {
				c_stop_patterns[i1][c_number_array[i2]] += "▲▼";
				l_count += 1;
			}
		}
	}
}

console.log(-1 < null);
console.log(0 < null);
console.log(1 < null);
console.log(-2 < null);

console.log(c_stop_patterns);

let l_table/*: string*/ = "";
for (let i1 = 0; i1 < c_stop_array.length; i1 ++) {
	l_table += "<tr><td>" + c_stop_array[i1] + "</td>";
	for (let i2 = 0; i2 < c_stop_patterns.length; i2++) {
		l_table += "<td>" + c_stop_patterns[i2][i1] + "</td>";
	}
	l_table += "</tr>";
}
document.getElementById("div2").innerHTML += "<table border=\"1\"><tbody>" + l_table + "</tbody></table>";



		//]]>
		</script>
	</body>
</html>
